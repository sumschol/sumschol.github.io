<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HashMap追魂连问</title>
    <link href="/2022/03/30/HashMap%E8%BF%BD%E9%AD%82%E8%BF%9E%E9%97%AE/"/>
    <url>/2022/03/30/HashMap%E8%BF%BD%E9%AD%82%E8%BF%9E%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="HashMap的底层数据结构是什么"><a href="#HashMap的底层数据结构是什么" class="headerlink" title="HashMap的底层数据结构是什么"></a>HashMap的底层数据结构是什么</h3><p>JDK1.7中，HashMap由<strong>数组</strong>和<strong>链表</strong>组成。数组是HashMap的主体，链表则是为了解决哈希冲突而存在的</p><p>JDK1.8中，HashMap由<strong>数组</strong>，<strong>链表</strong>和<strong>红黑树</strong>组成，当链表过长，会严重影响HashMap的性能，新加入的红黑树主要就是为了提高在链表过长时候的存储效率</p><p class=“note note-primary”>当同一个节点的链表过长时，搜索时间复杂度是O(n)，而红黑树搜索时间复杂度是O(logn)</p><p>HashMap采用Entry数组来存储key-value对，每一个键值对组成了一个Entry实体，Entry类实际上是一个<strong>单向的链表</strong>，它具有Next指针，可以连接下一个Entry实体。</p><p><img src="https://img-blog.csdnimg.cn/20190521153804906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0eWht,size_16,color_FFFFFF,t_70" alt="HashMap的结构"></p><h3 id="为什么要引入扰动函数"><a href="#为什么要引入扰动函数" class="headerlink" title="为什么要引入扰动函数"></a>为什么要引入扰动函数</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，putVal函数用到的<code>key</code>的hash值并不仅仅只是<code>key</code>对象的<code>hashCode()</code>方法的返回值，还会经过扰动函数<code>hash()</code>的扰动，那为什么要引入扰动函数呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>hashCode()</code>返回int值，取值范围是40多亿，只要哈希函数映射的比较均匀松散，碰撞几率是很小的。但不幸的是，HashMap的哈希桶大小只有16位，如果直接使用<code>hashCode()</code>则会对hash值以桶的长度取余，由于取余是通过与操作完成的，因此只有<code>hashCode()</code>的低位参加运算，这就大大增加了哈希碰撞的可能性。</p><p>基于此，<code>hash()</code>将<code>key.hashCode()</code>得到的高位和低位进行异或，综合了高低位影响，减少了hash碰撞的概率。</p><p class="note note-primary">在JDK8之前，扰动函数会扰动四次，JDK8简化了这个操作</p><h3 id="put方法的流程了解吗"><a href="#put方法的流程了解吗" class="headerlink" title="put方法的流程了解吗"></a>put方法的流程了解吗</h3><p>HashMap是怎么根据给定的key值找到entry的位置呢，下面初步分析一下添加元素的函数<code>put()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">//tab存放当前的哈希桶， p用作临时链表节点  </span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">//如果当前哈希表是空的，代表是初始化</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//那么直接去扩容哈希表，并且将扩容后的哈希桶长度赋值给n</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//如果当前index的节点是空的，表示没有发生哈希碰撞。 直接构建一个新节点Node，挂载在index处即可。</span><br>    <span class="hljs-comment">//index 是利用 哈希值 &amp; 哈希桶的长度-1，替代模运算</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则 发生了哈希冲突。</span><br>        <span class="hljs-comment">//e</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//如果哈希值相等，key也相等，则是覆盖value操作</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<span class="hljs-comment">//将当前节点引用赋值给e</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//红黑树</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不是覆盖操作，则插入一个普通链表节点</span><br>            <span class="hljs-comment">//遍历链表</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//遍历到尾部，追加新节点到尾部</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//如果追加节点后，链表数&gt;=8，则转化为红黑树</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//如果找到了要覆盖的节点</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果e不是null，说明有需要覆盖的节点，</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-comment">//则覆盖节点值，并返回原oldValue</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            <span class="hljs-comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span><br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果执行到了这里，说明插入了一个新的节点，所以会修改modCount，以及返回null。</span><br><br>    <span class="hljs-comment">//修改modCount</span><br>    ++modCount;<br>    <span class="hljs-comment">//更新size，并判断是否需要扩容。</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    <span class="hljs-comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary"><b>当两个对象的hashCode相等时会怎样?</b></br>hashCode相等产生hash碰撞会调用equals方法比较内容是否相等，内容如果相等则会进行覆盖，内容如果不等则会连接到链表后方</br>所以我们一般选用Integer，String等不可变类作为key，不可变实体的hashCode()值在创建的时候被缓存下来，不需要重复计算；同时，Integer和String此类对象很规范的重写了hashCode()以及equals()方法，方便了put()方法调用</p><p><strong>总结以上JDK8的<code>put()</code> 方法主要流程如下：</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">- 数组是否为空，若为空则调用`resize()`初始化数组<br><br>- 根据元素`key`计算hash值，并找到该元素在数组中存储的下标<br><br>- 如果该位置为空，直接将元素放入；<br><br>  如果不为空（哈希碰撞），判断该元素的`value`是否相等，<br><br>  如果`value`相等，则覆盖掉该位置元素，<br><br>  如果不相等，并且是链表结构，则判断是否需要扩容或树化链表，然后添加元素<br></code></pre></td></tr></table></figure><h3 id="HashMap是如何扩容的"><a href="#HashMap是如何扩容的" class="headerlink" title="HashMap是如何扩容的"></a>HashMap是如何扩容的</h3><p>先介绍HashMap的几个基本属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">容量（capacity）：<span class="hljs-built_in">hash</span>表数组的大小，默认为16<br>初始化容量（initial capacity）：创建 <span class="hljs-built_in">hash</span> 表时指定的初始容量<br>尺寸（size）：当前 <span class="hljs-built_in">hash</span> 表中记录的数量<br>负载（load）：负载等于 “ size / capacity ”。负载为 0 时，表示空的 <span class="hljs-built_in">hash</span> 表。（轻负载的 <span class="hljs-built_in">hash</span> 表具有冲突少、适宜插入和查询的特点。）<br>负载因子（load <span class="hljs-built_in">factor</span>）：决定 <span class="hljs-built_in">hash</span> 表的最大填满程度，范围在 0~1，默认为 0.75 <br></code></pre></td></tr></table></figure><p><strong>什么时候触发扩容？</strong></p><p>当首次调用put方法时，HashMap会发现table为空然后调用resize方法进行初始化，当添加完元素后，如果HashMap发现<strong>size</strong>（元素总数）大于<strong>threshold</strong>（阈值），则会调用resize方法进行扩容</p><p>HashMap的容 量是有上限的，必须小于<strong>1&lt;&lt;30</strong>，即1073741824。如果容量超出了这个数，则不再增长，且阈值会被设置为<strong>Integer.MAX_VALUE</strong> </p><p class="note note-primary">    HashMap使用的是懒加载，构造完HashMap对象后，只要不进行put 方法插入元素之前，HashMap并不会去初始化或者扩容table。</p><p>数组扩容可分为三类：<strong>空参数的构造函数</strong>初始化，<strong>有参构造函数</strong>指定容量和<strong>达到阈值后的自动扩容</strong></p><ul><li>若threshold（阈值）不为空，table的首次初始化大小为阈值，否则初始化为缺省值大小16</li><li>默认的负载因子大小为0.75，当一个map填满了75%的bucket时候，就会扩容，扩容后的大小变为原来的两倍</li></ul><p class="note note-primary">负载因子越大，碰撞的概率也就越大，由于发生碰撞后的代价很大，效率大打折扣。因此负载因子设定0.75也是一个空间换时间的考虑，0.75这个数值是经过充分的考虑决定的。</p><p><strong>为什么在扩容时是成倍扩容，而不是扩容为1.5倍，2.5倍呢？</strong><br>理论上，扩容倍数用多少都行，1.5， 2.5 ，3.5都可以的，都能实现HashMap，实际上，因为计算哈希值的时候是使用取模运算，想要优化这个取模运算的速度，就需要把HashMap内部的数组长度固定为 2^n 的长度，也就是说HashMap里面的数组的长度，始终都是2的n次幂。</p><p><strong>什么时候会树化链表？</strong></p><p>有多个对象存进来，假设下标都是1，链表的长度达到8，插入第9个一样下标时，会判断当前数组长度是否小于64，如果小于64就对数组进行扩容，如此进行多次之后数组的长度已经不小于64，就会采取红黑树的数据结构代替长链表进行存储，提高查询性能。</p><p class="note note-primary">    总的来说，JDK1.8 HashMap有两种扩容的情况：</br>1 当map实际数量等于threshold容量的阈值时，会进行两倍扩容。</br>2 当map中数组中某个桶的链表长度大于树形化阈值TREEIFY_THRESHOLD=8，并且map元素的数量小于树形化最小容量MIN_TREEIFY_CAPACITY=64时，容量进行两倍扩容。</br>否则树形化阈值8并且map元素个数大于64时，进行链表转红黑树。</p><h3 id="哈希冲突解决方案有哪些"><a href="#哈希冲突解决方案有哪些" class="headerlink" title="哈希冲突解决方案有哪些"></a>哈希冲突解决方案有哪些</h3><p>解决Hash冲突方法有：<strong>开放定址法</strong>、<strong>再哈希法</strong>、<strong>链地址法</strong>（HashMap拉链法）、<strong>建立公共溢出区</strong>。</p><ul><li><p><strong>开放定址法</strong>也称为<strong>再散列法</strong>：基本思想就是，如果<code>p=H(key)</code>出现冲突时，则以p为基础，再次hash，<code>p1=H(p)</code>，如果p1再次出现冲突，则以p1为基础，以此类推，直到找到一个不冲突的哈希地址<code>pi</code>。</p></li><li><p><strong>再哈希法</strong>（双重散列，多重散列）：提供多个不同的hash函数，R1&#x3D;H1(key1)发生冲突时，再计算R2&#x3D;H2（key1），直到没有冲突为止。这样做虽然不易产生堆集，但增加了计算的时间。</p></li><li><p><strong>链地址法</strong>（拉链法）：将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行，链表法适用于经常进行插入和删除的情况。</p></li><li><p><strong>建立公共溢出区</strong>：将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区</p><p class="note note-primary">注意：开放定址法只能使用同一种hash函数进行再次hash，再哈希法可以调用多种不同的hash函数进行再次hash</p></li></ul><h3 id="HashMap-是线程安全的吗？多线程下会有什么问题"><a href="#HashMap-是线程安全的吗？多线程下会有什么问题" class="headerlink" title="HashMap 是线程安全的吗？多线程下会有什么问题"></a>HashMap 是线程安全的吗？多线程下会有什么问题</h3><p><strong>HashMap是线程不安全的！</strong></p><ul><li>多线程下扩容死循环。JDK1.7中的HashMap使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此JDK1.8使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题</li><li>多线程的put可能导致元素的丢失。多线程同时执行put操作，如果计算出来的索引位置是相同的，那会造成前一个key被后一个key覆盖，从而导致元素的丢失。此问题在JDK1.7和JDK1.8中都存在</li><li>put和get并发时，可能导致get为null。线程1执行put时，因为元素个数超出threshold而导致rehash，线程2此时执行get，有可能导致这个问题，此问题在JDK1.7和JDK1.8中都存在</li></ul><p>未完待续</p><hr><p>参考：</p><p><a href="https://blog.csdn.net/zxt0601/article/details/77413921">https://blog.csdn.net/zxt0601/article/details/77413921</a></p><p><a href="https://blog.csdn.net/qq_36520235/article/details/82417949">https://blog.csdn.net/qq_36520235/article/details/82417949</a></p><p><a href="https://blog.csdn.net/bjwfm2011/article/details/81076736">https://blog.csdn.net/bjwfm2011/article/details/81076736</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是子串搜索？用KMP算法实现strStr()</title>
    <link href="/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/"/>
    <url>/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是子串搜索"><a href="#什么是子串搜索" class="headerlink" title="什么是子串搜索"></a>什么是子串搜索</h3><p>C 库函数 - strStr()描述如下：</p><p>C 库函数<code>char \strstr(const char \haystack, const char \needle)</code>在字符串 <code>haystack </code>中查找第一次出现字符串 <code>needle </code>的位置，不包含终止符<code> &#39;\0&#39;</code>。</p><ul><li><strong>haystack</strong> – 要被检索的 C 字符串。</li><li><strong>needle</strong> – 在 haystack 字符串内要搜索的小字符串。</li></ul><p>解决子串搜索问题可用暴力匹配，时间复杂度为O(m*n)：</p><p><img src="https://pic2.zhimg.com/v2-996d3fe34757e00f47cb5ab0141e7f89_b.webp" alt="暴力匹配"></p><h3 id="KMP有什么用"><a href="#KMP有什么用" class="headerlink" title="KMP有什么用"></a>KMP有什么用</h3><p>KMP主要应用在字符串匹配上，主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</p><p class="note note-primary">所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组(也叫prefix前缀表)肩负的重任。</p><h3 id="什么是前后缀"><a href="#什么是前后缀" class="headerlink" title="什么是前后缀"></a>什么是前后缀</h3><p>字符串的前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。</p><p>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><h3 id="前缀表-next数组"><a href="#前缀表-next数组" class="headerlink" title="前缀表(next数组)"></a>前缀表(next数组)</h3><p class="note note-primary">    前缀表是用来回退的，next数组值表示当前位置以前的串中最长相同前后缀的长度，    它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>最长公共前后缀怎么求呢，以”ababc“为例：</p><figure class="highlight text"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs text">a：很明显，它的公共前后缀长度为0<br>ab：公共前后缀长度为0，因为a != b<br>aba：公共前后缀长度为1，也是最长的，因为前后都有一个a<br>abab：最长公共前后缀长度为2<br>ababc：最长公共前后缀长度为0<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">i</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">a</td><td align="center">ab</td><td align="center">aba</td><td align="center">abab</td><td align="center">ababc</td></tr><tr><td align="center">next[i]</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p class="note note-primary">注意：公共前后缀指的前缀和后缀从左到右每个字母相等，而不是对称相等</p><p>下面就可以构造next数组了。</p><p><strong>构造next数组其实就是计算模式串s的前缀表的过程。</strong>主要分四步：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">初始化<br>前后缀相同情况<br>前后缀不相同情况<br>记录next[i]的值<br></code></pre></td></tr></table></figure><p><strong>初始化：</strong></p><p>定义指针<code>i</code>和<code>j</code>，表示当前为<code>0-i</code>字符串，<code>j</code>指向前缀与后缀相同的最右位置</p><p>初始化<code>next[0] = j</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br></code></pre></td></tr></table></figure><p><strong>前后缀不同的情况：</strong></p><p><code>j</code>指针移动到<code>next[j - 1]</code>所指示下标位置，直到前后缀相同或者移动到最前面</p><p class="note note-primary">j是一个连续回退的过程，固这里要使用while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j])&#123;<br>    j = next[j - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前后缀相同情况：</strong></p><p><code>j</code>指针后移，同时记录下<code>j</code>指针后移后的位置到<code>next[i]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(s[i] == s[j])&#123;<br>    j++;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>记录<code>next[i]</code>的值：</strong></p><p>此时前缀的<code>j</code>下标就是相同前后缀长度</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">next[i] <span class="hljs-operator">=</span> j<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>求next数组代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String s)</span>&#123;<br>    <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; ch.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; ch[j] != ch[i])&#123;<br>            j = next[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ch[i] == ch[j])&#123;<br>        j++;<br>    &#125;<br>    next[i] = j;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用前缀表进行匹配"><a href="#使用前缀表进行匹配" class="headerlink" title="使用前缀表进行匹配"></a>使用前缀表进行匹配</h3><p>此时已经得到了<code>needle</code>的前缀表，就可以用前缀表来进行字符串匹配了。</p><p class="note note-primary">    回顾：前缀表是用来回退的，它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>所以我们逐位比较两字符串，<code>i</code>为<code>haystack</code>的下标，<code>j</code>为<code>needle</code>·的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)<br></code></pre></td></tr></table></figure><p>当对应位<strong>相等</strong>时，<code>i</code>和<code>j</code>都后移，继续比较下一位</p><p>当对应位<strong>不相等</strong>时，<code>j</code>根据next的值连续回退，同时<code>i</code>后移一位</p><p>问题：找到子串存在的条件是什么呢？</p><p>当<code>j</code>移动到needle末尾时，说明<code>needle</code>中<code>j</code>之前的内容都能匹配，所以该串是一个子串，此时返回子串的起始下标即可</p><p>匹配代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)&#123;<br>    <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != haystack.charAt(j))&#123;<br>        j = next[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(haystack.charAt(i) == haystack.charAt(j))&#123;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>        <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p><a href="https://blog.csdn.net/niukai1768/article/details/79579709">https://blog.csdn.net/niukai1768/article/details/79579709</a></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="https://leetcode-cn.com/problems/implement-strstr/">https://leetcode-cn.com/problems/implement-strstr/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">if</span>(needle.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[needle.length()];<br>        getNext(next, needle);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;i &lt; haystack.length(); i++)&#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(haystack.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>                <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String needle)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; needle.length(); i++) &#123;<br>            <span class="hljs-comment">//不相同</span><br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//相同</span><br>            <span class="hljs-keyword">if</span>(needle.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例：<a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">https://leetcode-cn.com/problems/repeated-substring-pattern/</a></p><p>这又是一道标准的KMP的题目。</p><p class="note note-primary">    究竟什么时候可以用KMP算法？</br>    1  在一个串中查找是否出现过另一个串</br>    2  比较文本从左到右</br></p><p>本题可用next数组来确定是否存在重复子串</p><p>next 数组记录的就是最长相同前后缀，如果<code>数组长度-最长相等前后缀的长度</code>)正好可以被<code>数组的长度</code>整除，说明有该字符串有重复的子字符串。即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.length() % (s.length() - next[next.length - <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];<br>        getNext(next, s);<br>        <span class="hljs-keyword">if</span>(next[next.length - <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s.length() % (s.length() - next[next.length - <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String s)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(s.charAt(i) == s.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/313996832">https://zhuanlan.zhihu.com/p/313996832</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Session和Cookie</title>
    <link href="/2022/03/28/Session%E5%92%8Ccookie/"/>
    <url>/2022/03/28/Session%E5%92%8Ccookie/</url>
    
    <content type="html"><![CDATA[<h3 id="Session和cookie"><a href="#Session和cookie" class="headerlink" title="Session和cookie"></a>Session和cookie</h3><p class="note note-info">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户。<p>Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</p><p>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p></p><h5 id="1-存放位置"><a href="#1-存放位置" class="headerlink" title="1  存放位置"></a>1  存放位置</h5><p>cookie数据存放在客户的浏览器上。</p><p>session数据放在服务器上，当访问增多，会比较占用服务器的性能（SessionID是用Cookie保存在客户端的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。）</p><h5 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2 生命周期"></a>2 生命周期</h5><p>Cookie可以设置销毁时间，可以长期存在在客户端（例如本地记住密码，但也存在安全问题，一般会有加密手段）</p><p>一次会话间共享数据，也可以理解为多次请求间共享数据（浏览器页面关闭 ，session就消失了）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>判断语句正写报错，反写通过？</title>
    <link href="/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/"/>
    <url>/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">刷力扣遇到的一个问题，记录一下</p><p>问题如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; index &gt;= left)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure><p>用上面这个写法时，由于先用到了<code>s.charAt(index)</code>，就会报了数组越界，正确做法应该是先判断下标<code>index</code>的合法性再进行相关操作，如果下标不合法，就不会执行后面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(index &gt;= left &amp;&amp; s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
