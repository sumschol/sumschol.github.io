<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何做到网页局部更新？初识ajax异步请求</title>
    <link href="/2022/04/18/ajax/"/>
    <url>/2022/04/18/ajax/</url>
    
    <content type="html"><![CDATA[<p>我们知道，前端页面想要和后端进行数据交互，可以通过以下方式</p><ul><li>将参数添加到url中，后端通过get方式从url中获取数据 GET请求</li><li>前端页面通过form表单，将数据以get或者post的方式发送给后端 POST请求&#x2F;GET请求</li><li>前端通过a标签(和使用url方式参数的方式) GET请求</li></ul><p><strong>此外，我们还可以使用ajax技术来实现前后端数据的交互。</strong></p><h3 id="什么是ajax"><a href="#什么是ajax" class="headerlink" title="什么是ajax"></a>什么是ajax</h3><p>AJAX（Asynchronous Javascript And XML）：异步的 JavaScript 和XML）是一种在无需重新加载整个网页的情况下，能够更新部分页面内容的新方法。</p><p>Ajax请求通过XMLHttpRequest对象发送请求，该对象有四个状态（readyState）：<br>0-未初始化、1-正在初始化、2-发送数据、3-正在发送数据、4-完成。<br>当XMLHttpRequest.readyState为4时，表示ajax请求已经完成可以得到响应结果。</p><p class="note note-primary">所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组(也叫prefix前缀表)肩负的重任。</p><blockquote><ul><li>当XMLHttpRequest.status为200的时候，表示响应成功，此时触发success().</li><li>其他状态码则触发error()。</li></ul></blockquote><h3 id="全局刷新和局部刷新"><a href="#全局刷新和局部刷新" class="headerlink" title="全局刷新和局部刷新"></a>全局刷新和局部刷新</h3><h4 id="全局刷新"><a href="#全局刷新" class="headerlink" title="全局刷新"></a>全局刷新</h4><ol><li><p>必须由浏览器亲自向服务端发送请求协议包。</p></li><li><p>这个行为导致服务端直接将【响应包】发送到浏览器内存中</p></li><li><p>这个行为导致浏览器内存中原有内容被覆盖掉</p></li><li><p>这个行为导致浏览器在展示数据时候，只有响应数据可以展示</p></li></ol><h4 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h4><p>浏览器在展示数据时，此时在窗口既可以看到本次的响应数据， 同时又可以看到浏览器内存中原有数据.</p><p><strong>局部刷新原理：</strong></p><ol><li><p>不能由浏览器发送请求给服务端</p></li><li><p>浏览器委托浏览器内存中一个脚本对象代替浏览器发送请求</p></li><li><p>这个行为导致服务端直接将响应包发送脚本对象内存中</p></li><li><p>这个行为导致脚本对象内容被覆盖掉，但是此时浏览器内存中绝大部分内容没有收到任何影响.</p></li><li><p>这个行为导致浏览器在展示数据时候,同时展示原有数据和响应数据</p></li></ol><p>简单介绍完ajax之后记录一下今天解决的问题</p><h3 id="Solve"><a href="#Solve" class="headerlink" title="Solve"></a>Solve</h3><p>背景：一个查询分页的demo，在点击相应页码之后要进行数据的查询并更新页面，此时想到了用ajax来异步请求局部更新，但问题在于<strong>怎么只更新某个具体的div标签中的内容</strong></p><p>查了很多资料，尝试后发现控制器的返回值会传到js的<code>success:function (data)</code>函数的data参数中，想到将要刷新的div拷贝一份作为返回值返回，但发现这样其中的模板数据无法被解析，想到那可以直接传一个<code>ModelAndView</code>过来，结果成功了</p><p class="note note-primary">整理一下思路：ajax是怎么实现页面局部刷新的？</br>1 前端页面页码标签绑定js函数并传入点击的pageNum，点击时调用ajax访问目标url;</br>2 控制器通过pageNum调用service层生成对应的PageInfo，并将PageInfo加入到ModelAndView中并返回；</br>3 此时ajax得到响应（XMLHttpRequest.status=200），会执行success()，拿到ModelAndView并更新页面。</p><p>product.html：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">c:choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">c:when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;$&#123;info.list.size()!=0&#125;&quot;</span>&gt;</span><br><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;top&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;all&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;allClick()&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left: 50px&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>全选<br>                    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/admin/addproduct.jsp&#125;&quot;</span>&gt;</span><br><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span></span><br><span class="hljs-tag">                               <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;新增商品&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn1&quot;</span></span><br><span class="hljs-tag">                           <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;批量删除&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;deleteBatch()&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--显示分页后的商品--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;middle&quot;</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-bordered table-striped&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品介绍<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>定价（元）<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品图片<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>商品数量<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>操作<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;p : $&#123;info.list&#125;&quot;</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">valign</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ck&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ck&quot;</span></span><br><span class="hljs-tag">                                                                      <span class="hljs-attr">th:value</span>=<span class="hljs-string">&quot;$&#123;p.pId&#125;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ckClick()&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;p.pName&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;p.pContent&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;p.pPrice&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;55px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;45px&quot;</span></span><br><span class="hljs-tag">                                     <span class="hljs-attr">th:src</span>=<span class="hljs-string">&quot;@&#123;&#x27;/image_big/&#x27;+$&#123;p.pImage&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;p.pNumber&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;admin/product(flag=&#x27;delete&#x27;,pid=$&#123;p.pId&#125;)&#125;&quot;</span></span><br><span class="hljs-tag">                                   <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;return confirm(&#x27;确定删除吗？&#x27;)&quot;</span>&gt;</span>删除<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                <span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span></span><br><span class="hljs-tag">                                        <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;@&#123;/admin/product(flag=&#x27;one&#x27;,pid=$&#123;p.pId&#125;)&#125;&quot;</span>&gt;</span>修改<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-info &quot;</span></span><br><span class="hljs-tag">                                        <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;one($&#123;p.pId&#125;,$&#123;info.pageNum&#125;)&quot;</span>&gt;</span>编辑<br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-warning&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mydel&quot;</span></span><br><span class="hljs-tag">                                        <span class="hljs-attr">th:onclick</span>=<span class="hljs-string">&quot;del($&#123;p.pId&#125;)&quot;</span>&gt;</span>删除<br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>                    <span class="hljs-comment">&lt;!--分页栏--&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bottom&quot;</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">nav</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;...&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pagination&quot;</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-comment">&lt;!--                                         &lt;a--&gt;</span><br><span class="hljs-comment">&lt;!--                                            th:href=&quot;@&#123;/prod/split(page=$&#123;info.prePage&#125;)&#125;&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            aria-label=&quot;Previous&quot;/&gt;--&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;info.nextPage&#125;+&#x27;)&#x27;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Previous&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>«<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-comment">&lt;!--                                    &lt;c:forEach begin=&quot;1&quot; end=&quot;$&#123;info.pages&#125;&quot; var=&quot;i&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;li&gt;$&#123;i&#125;&lt;/li&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;c:if test=&quot;$&#123;info.pageNum==i&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;li&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                 &lt;a--&gt;</span><br><span class="hljs-comment">&lt;!--                                                    href=&quot;$&#123;pageContext.request.contextPath&#125;/prod/split.action?page=$&#123;i&#125;&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                    style=&quot;background-color: grey&quot;&gt;$&#123;i&#125;&lt;/a&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                &lt;a href=&quot;javascript:ajaxsplit($&#123;i&#125;)&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                   style=&quot;background-color: grey&quot;&gt;$&#123;i&#125;&lt;/a&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;/li&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/c:if&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;c:if test=&quot;$&#123;info.pageNum!=i&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;li&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                 &lt;a--&gt;</span><br><span class="hljs-comment">&lt;!--                                                    href=&quot;$&#123;pageContext.request.contextPath&#125;/prod/split.action?page=$&#123;i&#125;&quot;&gt;$&#123;i&#125;&lt;/a&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                &lt;a href=&quot;javascript:ajaxsplit($&#123;i&#125;)&quot;&gt;$&#123;i&#125;&lt;/a&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;/li&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/c:if&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                    &lt;/c:forEach&gt;--&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">th:each</span>=<span class="hljs-string">&quot;i : $&#123;pagesList&#125;&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;a th:if=&quot;$&#123;i&#125; == $&#123;info.pageNum&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;a style=&quot;background-color: grey&quot; th:text=&quot;$&#123;i&#125;&quot; th:href=&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;i&#125;+&#x27;)&#x27;&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/a&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;a th:unless=&quot;$&#123;i&#125; == $&#123;info.pageNum&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            &lt;a th:text=&quot;$&#123;i&#125;&quot; th:href=&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;i&#125;+&#x27;)&#x27;&quot;/&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/a&gt;--&gt;</span><br><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:if</span>=<span class="hljs-string">&quot;$&#123;i&#125; == $&#123;info.pageNum&#125;&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: cornflowerblue&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;i&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;i&#125;+&#x27;)&#x27;&quot;</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:unless</span>=<span class="hljs-string">&quot;$&#123;i&#125; == $&#123;info.pageNum&#125;&quot;</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;$&#123;i&#125;&quot;</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;i&#125;+&#x27;)&#x27;&quot;</span>/&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-comment">&lt;!--                                         &lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/prod/split.action?page=1&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--                                                aria-label=&quot;Next&quot;/&gt;--&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:href</span>=<span class="hljs-string">&quot;&#x27;javascript:ajaxsplit(&#x27;+$&#123;info.nextPage&#125;+&#x27;)&#x27;&quot;</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">&quot;Next&quot;</span>&gt;</span><br>                                            <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>»<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot; margin-left:150px;color: #0e90d2;height: 35px; line-height: 35px;&quot;</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span></span><br><span class="hljs-tag">                                            <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:orange;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br><span class="hljs-comment">&lt;!--                                        &lt;c:if test=&quot;$&#123;info.pageNum!=0&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            当前&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font--&gt;</span><br><span class="hljs-comment">&lt;!--                                                style=&quot;color:orange;&quot;&gt;$&#123;info.pageNum&#125;&lt;/font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;页&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/c:if&gt;--&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;第 &#x27;+$&#123;info.pageNum&#125;+&#x27; 页&#x27;&quot;</span>/&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">&quot;&#x27;共  &#x27;+$&#123;info.pages&#125;+&#x27;  页&#x27;&quot;</span>/&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;c:if test=&quot;$&#123;info.pageNum==0&#125;&quot;&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--                                            当前&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;font--&gt;</span><br><span class="hljs-comment">&lt;!--                                                style=&quot;color:orange;&quot;&gt;1&lt;/font&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;页&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--&gt;</span><br><span class="hljs-comment">&lt;!--                                        &lt;/c:if&gt;--&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">c:when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">c:otherwise</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:1200px; text-align: center;color: orangered;margin-top: 100px&quot;</span>&gt;</span>暂时没有符合条件的商品！<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">c:otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">c:choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ProductInfoController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/product&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductInfoController</span> &#123;<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@RequestMapping(&quot;/ajaxsplit&quot;)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">ajaxSplit</span><span class="hljs-params">(<span class="hljs-type">int</span> page)</span> &#123;<br>        <span class="hljs-type">PageInfo</span> <span class="hljs-variable">pageInfo</span> <span class="hljs-operator">=</span> productInfoService.splitPage(page, PAGE_SIZE);<br><span class="hljs-comment">//        session.setAttribute(&quot;info&quot;, pageInfo);</span><br>        <span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>();<br>        modelAndView.setViewName(<span class="hljs-string">&quot;product_table&quot;</span>);<br>        modelAndView.addObject(<span class="hljs-string">&quot;info&quot;</span>,pageInfo);<br>        modelAndView.addObject(<span class="hljs-string">&quot;pagesList&quot;</span>,PageInfoUtil.getPagesList(pageInfo));<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxsplit</span>(<span class="hljs-params">page</span>) &#123;<br>        <span class="hljs-comment">//异步ajax分页请求</span><br>        $.<span class="hljs-title function_">ajax</span>(&#123;<br>            <span class="hljs-comment">// url:getContextPath()+&quot;/product/ajaxsplit&quot;,</span><br>            <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/product/ajaxsplit&quot;</span>,<br>            <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&quot;page&quot;</span>:page&#125;,<br>            <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;post&quot;</span>,<br>            <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>                <span class="hljs-comment">//重新加载分页显示的组件table</span><br>                <span class="hljs-comment">//location.href----&gt;http://localhost:8080/admin/login.action</span><br>                <span class="hljs-comment">// $(&quot;#table&quot;).load(getContextPath()+&quot;http://localhost:8080/admin/product.jsp #table&quot;);</span><br>                $(<span class="hljs-string">&quot;#table&quot;</span>).<span class="hljs-title function_">html</span>(data)<br>            &#125;,<br>            <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;ajax err!&quot;</span>)<br>            &#125;<br>        &#125;)<br>    &#125;;<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://www.cnblogs.com/edwardwzw/p/13186003.html">ajax在什么情况下走success和error </a></p><p><a href="https://www.cnblogs.com/javatalk/p/10857517.html?ivk_sa=1024320u">ajax jq实现页面某一个div的刷新</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>迭代和递归有什么区别？二叉树的遍历</title>
    <link href="/2022/04/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2022/04/12/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h2 id="递归和迭代"><a href="#递归和迭代" class="headerlink" title="递归和迭代"></a>递归和迭代</h2><p><strong>递归</strong>是重复调用函数自身实现循环。</p><p><strong>迭代</strong>是函数内某段代码实现循环，循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。</p><p class="note note-primary">eg: 热芝士：GNU是一个自由的操作系统，其名称就是来自GNU's Not Unix!的递归缩写</p><p><strong>构成递归需具备的条件：</strong></p><p>1 子问题须与原始问题为同样的事，且更为简单；</p><p>2 不能无限制地调用本身，须有个出口，化简为非递归状况处理。</p><p class="note note-primary">递归的实现就是：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中</p><p><strong>递归的三要素：</strong></p><p>1 递归函数的参数和返回值</p><p>2 终止条件</p><p>3 单层递归的逻辑</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="三种顺序遍历"><a href="#三种顺序遍历" class="headerlink" title="三种顺序遍历"></a>三种顺序遍历</h3><p>二叉树的数据结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode left;<br>    TreeNode right;<br>    TreeNode() &#123;&#125;<br>    TreeNode(<span class="hljs-type">int</span> val) &#123; <span class="hljs-built_in">this</span>.val = val; &#125;<br>    TreeNode(<span class="hljs-type">int</span> val, TreeNode left, TreeNode right) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>        <span class="hljs-built_in">this</span>.left = left;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二叉树的遍历分为前序遍历<strong>（中 左 右）</strong>，中序遍历<strong>（左 中 右）</strong>和后序遍历<strong>（左 右 中）</strong></p><p>遍历有两种方法，一是递归求解，二是迭代，下面分别介绍这两种方法</p><h4 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4><p>二叉树的递归遍历格式较为固定，三种顺序的遍历代码变化不大，只需要确定好递归的三个要素即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        preorder(root, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preorder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; list)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        list.add(root.val);<br>        preorder(root.left, list);<br>        preorder(root.right, list);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>中序和后续只要稍微改变代码顺序即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//中序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; list)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        inorder(root.left, list);<br>        list.add(root.val);<br>        inorder(root.right, list);<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//后序</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; list)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        inorder(root.left, list);<br>        inorder(root.right, list);<br>        list.add(root.val);<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="迭代遍历"><a href="#迭代遍历" class="headerlink" title="迭代遍历"></a>迭代遍历</h4><p>迭代遍历与递归有所不同，需要显式地使用栈，但元素入栈的顺序和将其归入结果集的顺序未必相同，所以不同遍历顺序之间代码差异较大。那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</strong></p><p>我们首先来看前序遍历，前序遍历要访问的元素和要处理的元素顺序是一致的，都是中间节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//前序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.push(root);<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>            res.add(node.val);<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(node.right);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(node.left);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再看中序遍历，中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就意味着<strong>处理顺序和访问顺序是不一致的。</strong>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//中序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span> || !stack.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span>(cur != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(cur);<br>                cur = cur.left;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                cur = stack.pop();<br>                res.add(cur.val);<br>                cur = cur.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后来看后续遍历，显然后续遍历也存在处理顺序和访问顺序不一致的情况，但我们有另一种方法求解。</p><p>后序遍历是左右中，那我们可以先按照中右左的顺序遍历，得到res数组之后再将其逆序就是左右中的遍历顺序，可参考前序遍历的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//后序</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        stack.push(root);<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack.pop();<br>            res.add(node.val);<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(node.left);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>)&#123;<br>                stack.push(node.right);<br>            &#125;<br>        &#125;<br>        Collections.reverse(res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">总结一下，由于入栈顺序和访问顺序不同，迭代遍历二叉树的三种顺序代码差异较大，具体表现为：</br>中序遍历需要借助cur指针来帮助访问节点</br>后序遍历可以通过类似于前序遍历的结构得到res数组后再逆序来得到遍历结果</p>### 层序遍历<p>层序遍历其实就是图论中的<strong>广度优先遍历</strong>在二叉树上的应用，层序遍历一个二叉树，就是从左到右一层一层的去遍历二叉树。</p><p>我们需要借用一个辅助数据结构即队列来实现，队列先进先出，符合一层一层遍历的逻辑。</p><p class="note note-primary">*另外，栈先进后出适合模拟深度优先遍历也就是递归的逻辑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//层序遍历</span><br><span class="hljs-comment">//迭代实现</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Queue&lt;TreeNode&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        list.add(root);<br>        <span class="hljs-keyword">while</span>(!list.isEmpty())&#123;<br>            List&lt;Integer&gt; tempList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">listSize</span> <span class="hljs-operator">=</span> list.size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; listSize; i++)&#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> list.poll();<br>                tempList.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) list.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) list.add(node.right);<br>            &#125;<br>            res.add(tempList);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，层序遍历除了用迭代实现也可以用递归的方法实现，此处省略。</p><p>下面是两个层序遍历的应用练习</p><p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/">二叉树的右视图</a></p><p>记下遍历时每一层的最后一个元素即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">rightSideView</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">queueSize</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-comment">// List&lt;Integer&gt; tempList = new ArrayList&lt;&gt;();</span><br>            <span class="hljs-keyword">while</span>(queueSize-- &gt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                <span class="hljs-keyword">if</span>(queueSize == <span class="hljs-number">0</span>) res.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/">二叉树的逆序层级遍历</a></p><p>只需要加入一个栈用来存储每一层遍历得到的List，最后再取出即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrderBottom</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        Stack&lt;List&lt;Integer&gt;&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">queueSize</span> <span class="hljs-operator">=</span> queue.size();<br>            List&lt;Integer&gt; tempList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; queueSize; i++)&#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>                tempList.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>            stack.push(tempList);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!stack.isEmpty())&#123;<br>            res.add(stack.pop());<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二叉树的翻转"><a href="#二叉树的翻转" class="headerlink" title="二叉树的翻转"></a>二叉树的翻转</h3><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">翻转二叉树</a></p><p>翻转二叉树，只要将其每一个节点的两个子节点都翻转就行，可以用<strong>递归</strong>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        invert(root);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invert</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        swap(root);<br>        invert(root.left);<br>        invert(root.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以用<strong>迭代</strong>来遍历每个节点，同样的道理，将其子节点反转即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//广度优先遍历（层序遍历）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> root;<br>        queue.add(root);<br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>            swap(node);<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary">迭代法可选择广度优先遍历（层序遍历）和深度优先遍历实现，以上使用广度优先遍历</p><h3 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h3><p><a href="https://leetcode-cn.com/problems/symmetric-tree/">对称二叉树</a></p><p>对称二叉树的判断，就是要判断内侧和外侧节点，可以使用递归法来解决</p><p>递归三要素：</p><p>1  递归函数的参数和返回值：<code>boolean compare(TreeNode left, TreeNode right)</code></p><p>2  终止条件：有节点不相同就返回false，然后终止递归</p><p>3  单层递归逻辑：比较两个节点是否相等分为以下几种情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp; right != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left != <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//剩下的就是left和right都不为空的情况，再判断里面的值是否相等</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left.val != right.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//如果值也相等，继续判断下面的子节点</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> compare(root.left, root.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(TreeNode left, TreeNode right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp; right != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left != <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//剩下的就是left和right都不为空的情况，再判断里面的值是否相等</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left.val != right.val) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//如果值也相等，继续判断下面的子节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> compare(left.left, right.right) &amp;&amp; compare(right.left, left.right);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此题也可以用双端队列或者栈来解决</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HashMap追魂连问</title>
    <link href="/2022/03/30/HashMap%E8%BF%BD%E9%AD%82%E8%BF%9E%E9%97%AE/"/>
    <url>/2022/03/30/HashMap%E8%BF%BD%E9%AD%82%E8%BF%9E%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="HashMap的底层数据结构是什么"><a href="#HashMap的底层数据结构是什么" class="headerlink" title="HashMap的底层数据结构是什么"></a>HashMap的底层数据结构是什么</h3><p>JDK1.7中，HashMap由<strong>数组</strong>和<strong>链表</strong>组成。数组是HashMap的主体，链表则是为了解决哈希冲突而存在的</p><p>JDK1.8中，HashMap由<strong>数组</strong>，<strong>链表</strong>和<strong>红黑树</strong>组成，当链表过长，会严重影响HashMap的性能，新加入的红黑树主要就是为了提高在链表过长时候的存储效率</p><p class=“note note-primary”>当同一个节点的链表过长时，搜索时间复杂度是O(n)，而红黑树搜索时间复杂度是O(logn)</p><p>HashMap采用Entry数组来存储key-value对，每一个键值对组成了一个Entry实体，Entry类实际上是一个<strong>单向的链表</strong>，它具有Next指针，可以连接下一个Entry实体。</p><p><img src="https://img-blog.csdnimg.cn/20190521153804906.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0eWht,size_16,color_FFFFFF,t_70" alt="HashMap的结构"></p><h3 id="为什么要引入扰动函数"><a href="#为什么要引入扰动函数" class="headerlink" title="为什么要引入扰动函数"></a>为什么要引入扰动函数</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，putVal函数用到的<code>key</code>的hash值并不仅仅只是<code>key</code>对象的<code>hashCode()</code>方法的返回值，还会经过扰动函数<code>hash()</code>的扰动，那为什么要引入扰动函数呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br>        <span class="hljs-type">int</span> h;<br>        <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>hashCode()</code>返回int值，取值范围是40多亿，只要哈希函数映射的比较均匀松散，碰撞几率是很小的。但不幸的是，HashMap的哈希桶大小只有16位，如果直接使用<code>hashCode()</code>则会对hash值以桶的长度取余，由于取余是通过与操作完成的，因此只有<code>hashCode()</code>的低位参加运算，这就大大增加了哈希碰撞的可能性。</p><p>基于此，<code>hash()</code>将<code>key.hashCode()</code>得到的高位和低位进行异或，综合了高低位影响，减少了hash碰撞的概率。</p><p class="note note-primary">在JDK8之前，扰动函数会扰动四次，JDK8简化了这个操作</p><h3 id="put方法的流程了解吗"><a href="#put方法的流程了解吗" class="headerlink" title="put方法的流程了解吗"></a>put方法的流程了解吗</h3><p>HashMap是怎么根据给定的key值找到entry的位置呢，下面初步分析一下添加元素的函数<code>put()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params">               <span class="hljs-type">boolean</span> evict)</span> &#123;<br>    <span class="hljs-comment">//tab存放当前的哈希桶， p用作临时链表节点  </span><br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br>    <span class="hljs-comment">//如果当前哈希表是空的，代表是初始化</span><br>    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//那么直接去扩容哈希表，并且将扩容后的哈希桶长度赋值给n</span><br>        n = (tab = resize()).length;<br>    <span class="hljs-comment">//如果当前index的节点是空的，表示没有发生哈希碰撞。 直接构建一个新节点Node，挂载在index处即可。</span><br>    <span class="hljs-comment">//index 是利用 哈希值 &amp; 哈希桶的长度-1，替代模运算</span><br>    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//否则 发生了哈希冲突。</span><br>        <span class="hljs-comment">//e</span><br>        Node&lt;K,V&gt; e; K k;<br>        <span class="hljs-comment">//如果哈希值相等，key也相等，则是覆盖value操作</span><br>        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>            e = p;<span class="hljs-comment">//将当前节点引用赋值给e</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<span class="hljs-comment">//红黑树</span><br>            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br>        <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//不是覆盖操作，则插入一个普通链表节点</span><br>            <span class="hljs-comment">//遍历链表</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//遍历到尾部，追加新节点到尾部</span><br>                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br>                    <span class="hljs-comment">//如果追加节点后，链表数&gt;=8，则转化为红黑树</span><br>                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>                        treeifyBin(tab, hash);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//如果找到了要覆盖的节点</span><br>                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>                    <span class="hljs-keyword">break</span>;<br>                p = e;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//如果e不是null，说明有需要覆盖的节点，</span><br>        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br>            <span class="hljs-comment">//则覆盖节点值，并返回原oldValue</span><br>            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>                e.value = value;<br>            <span class="hljs-comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span><br>            afterNodeAccess(e);<br>            <span class="hljs-keyword">return</span> oldValue;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//如果执行到了这里，说明插入了一个新的节点，所以会修改modCount，以及返回null。</span><br><br>    <span class="hljs-comment">//修改modCount</span><br>    ++modCount;<br>    <span class="hljs-comment">//更新size，并判断是否需要扩容。</span><br>    <span class="hljs-keyword">if</span> (++size &gt; threshold)<br>        resize();<br>    <span class="hljs-comment">//这是一个空实现的函数，用作LinkedHashMap重写使用。</span><br>    afterNodeInsertion(evict);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p class="note note-primary"><b>当两个对象的hashCode相等时会怎样?</b></br>hashCode相等产生hash碰撞会调用equals方法比较内容是否相等，内容如果相等则会进行覆盖，内容如果不等则会连接到链表后方</br>所以我们一般选用Integer，String等不可变类作为key，不可变实体的hashCode()值在创建的时候被缓存下来，不需要重复计算；同时，Integer和String此类对象很规范的重写了hashCode()以及equals()方法，方便了put()方法调用</p><p><strong>总结以上JDK8的<code>put()</code> 方法主要流程如下：</strong></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">- 数组是否为空，若为空则调用`resize()`初始化数组<br><br>- 根据元素`key`计算hash值，并找到该元素在数组中存储的下标<br><br>- 如果该位置为空，直接将元素放入；<br><br>  如果不为空（哈希碰撞），判断该元素的`value`是否相等，<br><br>  如果`value`相等，则覆盖掉该位置元素，<br><br>  如果不相等，并且是链表结构，则判断是否需要扩容或树化链表，然后添加元素<br></code></pre></td></tr></table></figure><h3 id="HashMap是如何扩容的"><a href="#HashMap是如何扩容的" class="headerlink" title="HashMap是如何扩容的"></a>HashMap是如何扩容的</h3><p>先介绍HashMap的几个基本属性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">容量（capacity）：<span class="hljs-built_in">hash</span>表数组的大小，默认为16<br>初始化容量（initial capacity）：创建 <span class="hljs-built_in">hash</span> 表时指定的初始容量<br>尺寸（size）：当前 <span class="hljs-built_in">hash</span> 表中记录的数量<br>负载（load）：负载等于 “ size / capacity ”。负载为 0 时，表示空的 <span class="hljs-built_in">hash</span> 表。（轻负载的 <span class="hljs-built_in">hash</span> 表具有冲突少、适宜插入和查询的特点。）<br>负载因子（load <span class="hljs-built_in">factor</span>）：决定 <span class="hljs-built_in">hash</span> 表的最大填满程度，范围在 0~1，默认为 0.75 <br></code></pre></td></tr></table></figure><p><strong>什么时候触发扩容？</strong></p><p>当首次调用put方法时，HashMap会发现table为空然后调用resize方法进行初始化，当添加完元素后，如果HashMap发现<strong>size</strong>（元素总数）大于<strong>threshold</strong>（阈值），则会调用resize方法进行扩容</p><p>HashMap的容 量是有上限的，必须小于<strong>1&lt;&lt;30</strong>，即1073741824。如果容量超出了这个数，则不再增长，且阈值会被设置为<strong>Integer.MAX_VALUE</strong> </p><p class="note note-primary">    HashMap使用的是懒加载，构造完HashMap对象后，只要不进行put 方法插入元素之前，HashMap并不会去初始化或者扩容table。</p><p>数组扩容可分为三类：<strong>空参数的构造函数</strong>初始化，<strong>有参构造函数</strong>指定容量和<strong>达到阈值后的自动扩容</strong></p><ul><li>若threshold（阈值）不为空，table的首次初始化大小为阈值，否则初始化为缺省值大小16</li><li>默认的负载因子大小为0.75，当一个map填满了75%的bucket时候，就会扩容，扩容后的大小变为原来的两倍</li></ul><p class="note note-primary">负载因子越大，碰撞的概率也就越大，由于发生碰撞后的代价很大，效率大打折扣。因此负载因子设定0.75也是一个空间换时间的考虑，0.75这个数值是经过充分的考虑决定的。</p><p><strong>为什么在扩容时是成倍扩容，而不是扩容为1.5倍，2.5倍呢？</strong><br>理论上，扩容倍数用多少都行，1.5， 2.5 ，3.5都可以的，都能实现HashMap，实际上，因为计算哈希值的时候是使用取模运算，想要优化这个取模运算的速度，就需要把HashMap内部的数组长度固定为 2^n 的长度，也就是说HashMap里面的数组的长度，始终都是2的n次幂。</p><p><strong>什么时候会树化链表？</strong></p><p>有多个对象存进来，假设下标都是1，链表的长度达到8，插入第9个一样下标时，会判断当前数组长度是否小于64，如果小于64就对数组进行扩容，如此进行多次之后数组的长度已经不小于64，就会采取红黑树的数据结构代替长链表进行存储，提高查询性能。</p><p class="note note-primary">    总的来说，JDK1.8 HashMap有两种扩容的情况：</br>1 当map实际数量等于threshold容量的阈值时，会进行两倍扩容。</br>2 当map中数组中某个桶的链表长度大于树形化阈值TREEIFY_THRESHOLD=8，并且map元素的数量小于树形化最小容量MIN_TREEIFY_CAPACITY=64时，容量进行两倍扩容。</br>否则树形化阈值8并且map元素个数大于64时，进行链表转红黑树。</p><h3 id="哈希冲突解决方案有哪些"><a href="#哈希冲突解决方案有哪些" class="headerlink" title="哈希冲突解决方案有哪些"></a>哈希冲突解决方案有哪些</h3><p>解决Hash冲突方法有：<strong>开放定址法</strong>、<strong>再哈希法</strong>、<strong>链地址法</strong>（HashMap拉链法）、<strong>建立公共溢出区</strong>。</p><ul><li><p><strong>开放定址法</strong>也称为<strong>再散列法</strong>：基本思想就是，如果<code>p=H(key)</code>出现冲突时，则以p为基础，再次hash，<code>p1=H(p)</code>，如果p1再次出现冲突，则以p1为基础，以此类推，直到找到一个不冲突的哈希地址<code>pi</code>。</p></li><li><p><strong>再哈希法</strong>（双重散列，多重散列）：提供多个不同的hash函数，R1&#x3D;H1(key1)发生冲突时，再计算R2&#x3D;H2（key1），直到没有冲突为止。这样做虽然不易产生堆集，但增加了计算的时间。</p></li><li><p><strong>链地址法</strong>（拉链法）：将哈希值相同的元素构成一个同义词的单链表，并将单链表的头指针存放在哈希表的第i个单元中，查找、插入和删除主要在同义词链表中进行，链表法适用于经常进行插入和删除的情况。</p></li><li><p><strong>建立公共溢出区</strong>：将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区</p><p class="note note-primary">注意：开放定址法只能使用同一种hash函数进行再次hash，再哈希法可以调用多种不同的hash函数进行再次hash</p></li></ul><h3 id="HashMap-是线程安全的吗？多线程下会有什么问题"><a href="#HashMap-是线程安全的吗？多线程下会有什么问题" class="headerlink" title="HashMap 是线程安全的吗？多线程下会有什么问题"></a>HashMap 是线程安全的吗？多线程下会有什么问题</h3><p><strong>HashMap是线程不安全的！</strong></p><ul><li>多线程下扩容死循环。JDK1.7中的HashMap使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致环形链表的出现，形成死循环。因此JDK1.8使用尾插法插入元素，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题</li><li>多线程的put可能导致元素的丢失。多线程同时执行put操作，如果计算出来的索引位置是相同的，那会造成前一个key被后一个key覆盖，从而导致元素的丢失。此问题在JDK1.7和JDK1.8中都存在</li><li>put和get并发时，可能导致get为null。线程1执行put时，因为元素个数超出threshold而导致rehash，线程2此时执行get，有可能导致这个问题，此问题在JDK1.7和JDK1.8中都存在</li></ul><p>未完待续</p><hr><p>参考：</p><p><a href="https://blog.csdn.net/zxt0601/article/details/77413921">https://blog.csdn.net/zxt0601/article/details/77413921</a></p><p><a href="https://blog.csdn.net/qq_36520235/article/details/82417949">https://blog.csdn.net/qq_36520235/article/details/82417949</a></p><p><a href="https://blog.csdn.net/bjwfm2011/article/details/81076736">https://blog.csdn.net/bjwfm2011/article/details/81076736</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是子串搜索？用KMP算法实现strStr()</title>
    <link href="/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/"/>
    <url>/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是子串搜索"><a href="#什么是子串搜索" class="headerlink" title="什么是子串搜索"></a>什么是子串搜索</h3><p>C 库函数 - strStr()描述如下：</p><p>C 库函数<code>char \strstr(const char \haystack, const char \needle)</code>在字符串 <code>haystack </code>中查找第一次出现字符串 <code>needle </code>的位置，不包含终止符<code> &#39;\0&#39;</code>。</p><ul><li><strong>haystack</strong> – 要被检索的 C 字符串。</li><li><strong>needle</strong> – 在 haystack 字符串内要搜索的小字符串。</li></ul><p>解决子串搜索问题可用暴力匹配，时间复杂度为O(m*n)：</p><p><img src="https://pic2.zhimg.com/v2-996d3fe34757e00f47cb5ab0141e7f89_b.webp" alt="暴力匹配"></p><h3 id="KMP有什么用"><a href="#KMP有什么用" class="headerlink" title="KMP有什么用"></a>KMP有什么用</h3><p>KMP主要应用在字符串匹配上，主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</p><p class="note note-primary">所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组(也叫prefix前缀表)肩负的重任。</p><h3 id="什么是前后缀"><a href="#什么是前后缀" class="headerlink" title="什么是前后缀"></a>什么是前后缀</h3><p>字符串的前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。</p><p>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><h3 id="前缀表-next数组"><a href="#前缀表-next数组" class="headerlink" title="前缀表(next数组)"></a>前缀表(next数组)</h3><p class="note note-primary">    前缀表是用来回退的，next数组值表示当前位置以前的串中最长相同前后缀的长度，    它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>最长公共前后缀怎么求呢，以”ababc“为例：</p><figure class="highlight text"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs text">a：很明显，它的公共前后缀长度为0<br>ab：公共前后缀长度为0，因为a != b<br>aba：公共前后缀长度为1，也是最长的，因为前后都有一个a<br>abab：最长公共前后缀长度为2<br>ababc：最长公共前后缀长度为0<br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">i</th><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">a</td><td align="center">ab</td><td align="center">aba</td><td align="center">abab</td><td align="center">ababc</td></tr><tr><td align="center">next[i]</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td></tr></tbody></table><p class="note note-primary">注意：公共前后缀指的前缀和后缀从左到右每个字母相等，而不是对称相等</p><p>下面就可以构造next数组了。</p><p><strong>构造next数组其实就是计算模式串s的前缀表的过程。</strong>主要分四步：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">初始化<br>前后缀相同情况<br>前后缀不相同情况<br>记录next[i]的值<br></code></pre></td></tr></table></figure><p><strong>初始化：</strong></p><p>定义指针<code>i</code>和<code>j</code>，表示当前为<code>0-i</code>字符串，<code>j</code>指向前缀与后缀相同的最右位置</p><p>初始化<code>next[0] = j</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br></code></pre></td></tr></table></figure><p><strong>前后缀不同的情况：</strong></p><p><code>j</code>指针移动到<code>next[j - 1]</code>所指示下标位置，直到前后缀相同或者移动到最前面</p><p class="note note-primary">j是一个连续回退的过程，固这里要使用while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j])&#123;<br>    j = next[j - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前后缀相同情况：</strong></p><p><code>j</code>指针后移，同时记录下<code>j</code>指针后移后的位置到<code>next[i]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(s[i] == s[j])&#123;<br>    j++;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>记录<code>next[i]</code>的值：</strong></p><p>此时前缀的<code>j</code>下标就是相同前后缀长度</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">next[i] <span class="hljs-operator">=</span> j<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>求next数组代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String s)</span>&#123;<br>    <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; ch.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; ch[j] != ch[i])&#123;<br>            j = next[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ch[i] == ch[j])&#123;<br>        j++;<br>    &#125;<br>    next[i] = j;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用前缀表进行匹配"><a href="#使用前缀表进行匹配" class="headerlink" title="使用前缀表进行匹配"></a>使用前缀表进行匹配</h3><p>此时已经得到了<code>needle</code>的前缀表，就可以用前缀表来进行字符串匹配了。</p><p class="note note-primary">    回顾：前缀表是用来回退的，它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>所以我们逐位比较两字符串，<code>i</code>为<code>haystack</code>的下标，<code>j</code>为<code>needle</code>·的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)<br></code></pre></td></tr></table></figure><p>当对应位<strong>相等</strong>时，<code>i</code>和<code>j</code>都后移，继续比较下一位</p><p>当对应位<strong>不相等</strong>时，<code>j</code>根据next的值连续回退，同时<code>i</code>后移一位</p><p>问题：找到子串存在的条件是什么呢？</p><p>当<code>j</code>移动到needle末尾时，说明<code>needle</code>中<code>j</code>之前的内容都能匹配，所以该串是一个子串，此时返回子串的起始下标即可</p><p>匹配代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)&#123;<br>    <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != haystack.charAt(j))&#123;<br>        j = next[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(haystack.charAt(i) == haystack.charAt(j))&#123;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>        <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p><a href="https://blog.csdn.net/niukai1768/article/details/79579709">https://blog.csdn.net/niukai1768/article/details/79579709</a></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="https://leetcode-cn.com/problems/implement-strstr/">https://leetcode-cn.com/problems/implement-strstr/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">if</span>(needle.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[needle.length()];<br>        getNext(next, needle);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;i &lt; haystack.length(); i++)&#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(haystack.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>                <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String needle)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; needle.length(); i++) &#123;<br>            <span class="hljs-comment">//不相同</span><br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//相同</span><br>            <span class="hljs-keyword">if</span>(needle.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>例：<a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">https://leetcode-cn.com/problems/repeated-substring-pattern/</a></p><p>这又是一道标准的KMP的题目。</p><p class="note note-primary">    究竟什么时候可以用KMP算法？</br>    1  在一个串中查找是否出现过另一个串</br>    2  比较文本从左到右</br></p><p>本题可用next数组来确定是否存在重复子串</p><p>next 数组记录的就是最长相同前后缀，如果<code>数组长度-最长相等前后缀的长度</code>)正好可以被<code>数组的长度</code>整除，说明有该字符串有重复的子字符串。即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.length() % (s.length() - next[next.length - <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];<br>        getNext(next, s);<br>        <span class="hljs-keyword">if</span>(next[next.length - <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s.length() % (s.length() - next[next.length - <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String s)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(s.charAt(i) == s.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/313996832">https://zhuanlan.zhihu.com/p/313996832</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Session和Cookie</title>
    <link href="/2022/03/28/Session%E5%92%8Ccookie/"/>
    <url>/2022/03/28/Session%E5%92%8Ccookie/</url>
    
    <content type="html"><![CDATA[<h3 id="Session和cookie"><a href="#Session和cookie" class="headerlink" title="Session和cookie"></a>Session和cookie</h3><p class="note note-info">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户。<p>Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</p><p>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p></p><h5 id="1-存放位置"><a href="#1-存放位置" class="headerlink" title="1  存放位置"></a>1  存放位置</h5><p>cookie数据存放在客户的浏览器上。</p><p>session数据放在服务器上，当访问增多，会比较占用服务器的性能（SessionID是用Cookie保存在客户端的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。）</p><h5 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2 生命周期"></a>2 生命周期</h5><p>Cookie可以设置销毁时间，可以长期存在在客户端（例如本地记住密码，但也存在安全问题，一般会有加密手段）</p><p>一次会话间共享数据，也可以理解为多次请求间共享数据（浏览器页面关闭 ，session就消失了）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>判断语句正写报错，反写通过？</title>
    <link href="/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/"/>
    <url>/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">刷力扣遇到的一个问题，记录一下</p><p>问题如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; index &gt;= left)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure><p>用上面这个写法时，由于先用到了<code>s.charAt(index)</code>，就会报了数组越界，正确做法应该是先判断下标<code>index</code>的合法性再进行相关操作，如果下标不合法，就不会执行后面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(index &gt;= left &amp;&amp; s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
