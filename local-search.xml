<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>什么是子串搜索？用KMP算法实现strStr()</title>
    <link href="/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/"/>
    <url>/2022/03/29/%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%90%E4%B8%B2%E6%90%9C%E7%B4%A2%EF%BC%9F%E7%94%A8KMP%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0strStr()/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是子串搜索"><a href="#什么是子串搜索" class="headerlink" title="什么是子串搜索"></a>什么是子串搜索</h3><p>C 库函数 - strStr()描述如下：</p><p>C 库函数<code>char \strstr(const char \haystack, const char \needle)</code>在字符串 <code>haystack </code>中查找第一次出现字符串 <code>needle </code>的位置，不包含终止符<code> &#39;\0&#39;</code>。</p><ul><li><strong>haystack</strong> – 要被检索的 C 字符串。</li><li><strong>needle</strong> – 在 haystack 字符串内要搜索的小字符串。</li></ul><p>解决子串搜索问题可用暴力匹配，时间复杂度为O(m*n)：</p><p><img src="https://pic2.zhimg.com/v2-996d3fe34757e00f47cb5ab0141e7f89_b.webp" alt="暴力匹配"></p><h3 id="KMP有什么用"><a href="#KMP有什么用" class="headerlink" title="KMP有什么用"></a>KMP有什么用</h3><p>KMP主要应用在字符串匹配上，主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</p><p class="note note-primary">所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组(也叫prefix前缀表)肩负的重任。</p><h3 id="什么是前后缀"><a href="#什么是前后缀" class="headerlink" title="什么是前后缀"></a>什么是前后缀</h3><p>字符串的前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。</p><p>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><h3 id="前缀表-next数组"><a href="#前缀表-next数组" class="headerlink" title="前缀表(next数组)"></a>前缀表(next数组)</h3><p class="note note-primary">    前缀表是用来回退的，next数组值表示当前位置以前的串中最长相同前后缀的长度，    它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>最长公共前后缀怎么求呢，以”ababc“为例：</p><figure class="highlight text"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs text">a：很明显，它的公共前后缀长度为0<br>ab：公共前后缀长度为0，因为a != b<br>aba：公共前后缀长度为1，也是最长的，因为前后都有一个a<br>abab：最长公共前后缀长度为2<br>ababc：最长公共前后缀长度为0<br></code></pre></td></tr></table></figure><p class="note note-primary">注意：公共前后缀指的前缀和后缀从左到右每个字母相等，而不是对称相等</p>  <p>下面就可以构造next数组了。</p><p><strong>构造next数组其实就是计算模式串s，前缀表的过程。</strong>主要分四步：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">初始化<br>前后缀相同情况<br>前后缀不相同情况<br>记录next[i]的值<br></code></pre></td></tr></table></figure><p><strong>初始化：</strong></p><p>定义指针<code>i</code>和<code>j</code>，表示当前为<code>0-i</code>字符串，<code>j</code>指向前缀与后缀相同的最右位置</p><p>初始化<code>next[0] = j</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br></code></pre></td></tr></table></figure><p><strong>前后缀不同的情况：</strong></p><p><code>j</code>指针移动到<code>next[j - 1]</code>所指示下标位置，直到前后缀相同或者移动到最前面</p><p class="note note-primary">j是一个连续回退的过程，固这里要使用while循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j])&#123;<br>    j = next[j - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>前后缀相同情况：</strong></p><p><code>j</code>指针后移，同时记录下<code>j</code>指针后移后的位置到<code>next[i]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(s[i] == s[j])&#123;<br>    j++;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>记录<code>next[i]</code>的值：</strong></p><p>此时前缀的<code>j</code>下标就是相同前后缀长度</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">next[i] <span class="hljs-operator">=</span> j<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>求next数组代码如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String s)</span>&#123;<br>    <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>next[<span class="hljs-number">0</span>] = j;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; ch.length; i++)&#123;<br>        <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; ch[j] != ch[i])&#123;<br>            j = next[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ch[i] == ch[j])&#123;<br>        j++;<br>    &#125;<br>    next[i] = j;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用前缀表进行匹配"><a href="#使用前缀表进行匹配" class="headerlink" title="使用前缀表进行匹配"></a>使用前缀表进行匹配</h3><p>此时已经得到了<code>needle</code>的前缀表，就可以用前缀表来进行字符串匹配了。</p><p class="note note-primary">    回顾：前缀表是用来回退的，它记录了模式串与主串不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>所以我们逐位比较两字符串，<code>i</code>为<code>haystack</code>的下标，<code>j</code>为<code>needle</code>·的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)<br></code></pre></td></tr></table></figure><p>当对应位<strong>相等</strong>时，<code>i</code>和<code>j</code>都后移，继续比较下一位</p><p>当对应位<strong>不相等</strong>时，<code>j</code>根据next的值连续后移，同时<code>i</code>后移一位</p><p>问题：找到子串存在的条件是什么呢？</p><p>当<code>j</code>移动到needle末尾时，说明<code>needle</code>中<code>j</code>之前的内容都能匹配，所以该串是一个子串，此时返回子串的起始下标即可</p><p>匹配代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; haystack.length(); i++)&#123;<br>    <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != haystack.charAt(j))&#123;<br>        j = next[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">if</span>(haystack.charAt(i) == haystack.charAt(j))&#123;<br>        j++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>        <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p><a href="https://leetcode-cn.com/problems/implement-strstr/">https://leetcode-cn.com/problems/implement-strstr/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">if</span>(needle.length() == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[needle.length()];<br>        getNext(next, needle);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;i &lt; haystack.length(); i++)&#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(haystack.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == needle.length())&#123;<br>                <span class="hljs-keyword">return</span> i - needle.length() + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span>[] next, String needle)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; needle.length(); i++) &#123;<br>            <span class="hljs-comment">//不相同</span><br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(i) != needle.charAt(j))&#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">//相同</span><br>            <span class="hljs-keyword">if</span>(needle.charAt(i) == needle.charAt(j))&#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/313996832">https://zhuanlan.zhihu.com/p/313996832</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Session和Cookie</title>
    <link href="/2022/03/28/Session%E5%92%8Ccookie/"/>
    <url>/2022/03/28/Session%E5%92%8Ccookie/</url>
    
    <content type="html"><![CDATA[<h3 id="Session和cookie"><a href="#Session和cookie" class="headerlink" title="Session和cookie"></a>Session和cookie</h3><p class="note note-info">由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识别具体的用户。<p>Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；</p><p>Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。</p></p><h5 id="1-存放位置"><a href="#1-存放位置" class="headerlink" title="1  存放位置"></a>1  存放位置</h5><p>cookie数据存放在客户的浏览器上。</p><p>session数据放在服务器上，当访问增多，会比较占用服务器的性能（SessionID是用Cookie保存在客户端的，用户提交页面时，会将这一 SessionID提交到服务器端，来存取Session数据。）</p><h5 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2 生命周期"></a>2 生命周期</h5><p>Cookie可以设置销毁时间，可以长期存在在客户端（例如本地记住密码，但也存在安全问题，一般会有加密手段）</p><p>一次会话间共享数据，也可以理解为多次请求间共享数据（浏览器页面关闭 ，session就消失了）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>判断语句正写报错，反写通过？</title>
    <link href="/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/"/>
    <url>/2022/03/28/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5%E6%AD%A3%E5%86%99%E6%8A%A5%E9%94%99%EF%BC%8C%E5%8F%8D%E5%86%99%E9%80%9A%E8%BF%87%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p class="note note-info">刷力扣遇到的一个问题，记录一下</p><p>问题如下：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span> &amp;&amp; index &gt;= left)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure><p>用上面这个写法时，由于先用到了<code>s.charAt(index)</code>，就会报了数组越界，正确做法应该是先判断下标<code>index</code>的合法性再进行相关操作，如果下标不合法，就不会执行后面的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(index &gt;= left &amp;&amp; s.charAt(index) != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>    index--;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
